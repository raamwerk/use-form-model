{"version":3,"sources":["../src/use-form-model.js"],"names":["ModelContext","FormModel","Form","model","props","T","instanceOf","isRequired","Control","as","name","onChange","value","checked","type","console","warn","newProps","onChangeCaller","event","target","call","React","createElement","oneOfType","string","func","Input","TextArea","Select","useFormModel","obj","key","setValue","Object","defineProperty","enumerable","get","set","freeze"],"mappings":"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","sourcesContent":["import React, {createContext, useContext, useState} from 'react'\nimport setPropTypes from 'set-prop-types'\n\nconst ModelContext = createContext()\nclass FormModel { }\n\nfunction Form ({model, ...props}) {\n  return (\n    <ModelContext.Provider value={model}>\n      <form {...props} />\n    </ModelContext.Provider>\n  )\n}\nsetPropTypes(Form, T => ({\n  model: T.instanceOf(FormModel).isRequired\n}))\n\nfunction Control ({as, name, onChange, value, checked, type, ...props}) {\n  const model = useContext(ModelContext)\n  if (!(name in model)) {\n    console.warn(`Provided name \"${name}\" does not exist in the provided FormModel.`)\n  }\n  if (type === 'checkbox') {\n    checked = model[name]\n  } else if (type === 'radio') {\n    checked = (model[name] === value)\n  } else {\n    value = model[name]\n  }\n  const newProps = {\n    onChange: function onChangeCaller (event) {\n      if (type === 'checkbox') {\n        model[name] = event.target.checked\n      } else if (type === 'radio') {\n        if (event.target.checked) model[name] = event.target.value\n      } else {\n        model[name] = event.target.value\n      }\n      if (typeof onChange === 'function') {\n        onChange.call(this, event)\n      }\n    },\n    value, checked, type, name, ...props\n  }\n  return React.createElement(as, newProps);\n}\nsetPropTypes(Control, T => ({\n  as: [T.oneOfType([T.string, T.func]), 'input'],\n  name: T.string.isRequired\n}))\n\nconst Input = props => <Control as=\"input\" {...props} />\nconst TextArea = props => <Control as=\"textarea\" {...props} />\nconst Select = props => <Control as=\"select\" {...props} />\n\nfunction useFormModel (obj) {\n  const model = new FormModel()\n  for (const key in obj) {\n    const [value, setValue] = useState(obj[key])\n    Object.defineProperty(model, key, {\n      enumerable: true,\n      get: () => value,\n      set: value => setValue(value)\n    })\n  }\n  return Object.freeze(model)\n}\n\nForm.Control = Control\nForm.Input = Input\nForm.TextArea = TextArea\nForm.Select = Select\n\nexport default useFormModel\nexport {Form, Control, Input, TextArea, Select, useFormModel}\n"],"file":"use-form-model.js"}